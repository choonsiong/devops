# my global config
global:
  scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          # - alertmanager:9093

# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
rule_files:
  # - "first_rules.yml"
  # - "second_rules.yml"

# A scrape configuration containing exactly one endpoint to scrape:
# Here it's Prometheus itself.
scrape_configs:
  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
  - job_name: "prometheus"

    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.

    static_configs:
      - targets: ["localhost:9090"]
  - job_name: "spring-actuator"

    metrics_path: '/actuator/prometheus'
    scrape_interval: 5s
    static_configs:
      - targets: ['192.168.0.101:8080']

  - job_name: "prometheus-client-1"

    static_configs:
      - targets: ['192.168.0.122:9100']

  - job_name: "prometheus-client-2"

    static_configs:
      - targets: ['192.168.0.122:9101']

  - job_name: "aws ec2"
    # Use service discovery
    # Assuming that we have a EC2 instance with node exporter installed and listened on port 9100
    ec2_sd_configs:
      - port: 9100
        region: ap-southeast-2
        access_key: xxx
        secret_key: yyy
        filters:
          - name: tag:Name
            values:
              - dev-.*
              - prod-.*
    relabel_configs:
      - source_labels: [__meta_ec2_tag_Name, __meta_ec2_private_ip]
        target_label: instance
      - source_labels: [__meta_ec2_tag_Name]
        regex: dev-test-.*
        action: drop
      - source_labels: [__meta_ec2_public_ip]
        replacement: ${1}:9100
        target_label: __address__        
