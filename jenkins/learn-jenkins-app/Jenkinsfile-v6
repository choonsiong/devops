pipeline {
    agent any

    environment {
        NETLIFY_SITE_ID = credentials('NETLIFY_LEARN_JENKINS_APP_SITE_ID')
        NETLIFY_AUTH_TOKEN = credentials('NETLIFY_TOKEN')
        // https://www.jenkins.io/doc/book/pipeline/jenkinsfile/#using-environment-variables
        REACT_APP_VERSION = "1.0.$BUILD_ID"
    }

    stages {
        // Line
        /*
        Line 1
        Line 2
        */
//         stage('Docker') {
//             steps {
//                 sh 'docker build -t choonsiong/my-playwright .'
//             }
//         }

//         stage('AWS') {
//             agent {
//                 docker {
//                     image 'amazon/aws-cli'
//                     args "--entrypoint=''"
//                 }
//             }
//
//             environment {
//                 AWS_S3_BUCKET_NAME = 'lcs-learn-jenkins-app'
//             }
//
//             steps {
//                 withCredentials([usernamePassword(credentialsId: 'aws-s3-access', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
//                     sh '''
//                         #ls -l
//                         aws --version
//                         #aws s3 ls
//                         #aws s3 cp README.md s3://${AWS_S3_BUCKET_NAME}/index.html
//                         aws s3 sync build s3://${AWS_S3_BUCKET_NAME}
//                     '''
//                 }
//             }
//         }

        stage('Build') {
            agent {
                docker {
                    image 'node:18-alpine'
                    reuseNode true
                }
            }

            steps {
                sh '''
                    echo "Building node app..."
                    node --version
                    npm --version
                    ls -la
                    npm ci
                    npm run build
                    ls -la
                '''
            }
        }

        stage('AWS') {
            agent {
                docker {
                    image 'amazon/aws-cli'
                    args "--entrypoint=''"
                    reuseNode true
                }
            }

            environment {
                AWS_S3_BUCKET_NAME = 'lcs-learn-jenkins-app'
            }

            steps {
                withCredentials([usernamePassword(credentialsId: 'aws-s3-access', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                    sh '''
                        ls -l
                        aws --version
                        #aws s3 ls
                        #aws s3 cp README.md s3://${AWS_S3_BUCKET_NAME}/index.html
                        aws s3 sync build s3://${AWS_S3_BUCKET_NAME}
                    '''
                }
            }
        }

        stage('Run Tests') {
            parallel {
                stage('Unit Test') {
                    agent {
                        docker {
                            image 'node:18-alpine'
                            reuseNode true
                        }
                    }

                    steps {
                        sh '''
                            echo "Testing node app..."
                            test -f build/index.html && echo "File exists!"
                            echo "Run npm test..."
                            npm test
                        '''
                    }

                    post {
                        always {
                            junit 'jest-test-results/junit.xml'
                        }
                    }
                }

                stage('End to End Test') {
                    agent {
                        docker {
                            //image 'mcr.microsoft.com/playwright:v1.39.0-jammy'
                            image 'choonsiong/my-playwright'
                            reuseNode true
                            //args '-u root:root'
                        }
                    }

                    steps {
                        sh '''
                            echo "======> Testing end-to-end node app..."

                            echo "======> Serving from build..."

                            serve -s build &

                            echo "======> Wait for few seconds..."

                            sleep 3

                            echo "======> Starting playwright test..."

                            npx playwright test --reporter=html

                            sleep 2
                        '''
                    }

                    post {
                            always {
                                // Need to run below script under Script Console in order to see the HTML page
                                // System.setProperty("hudson.model.DirectoryBrowserSupport.CSP", "sandbox allow-scripts;")
                                publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, icon: '', keepAll: false, reportDir: 'playwright-report', reportFiles: 'index.html', reportName: 'Playwright Local HTML Report', reportTitles: '', useWrapperFileDirectly: true])
                            }
                        }
                }
            }
        }

        stage('Deploy Staging and E2E Test') {
            agent {
                docker {
                    //image 'mcr.microsoft.com/playwright:v1.39.0-jammy'
                    image 'choonsiong/my-playwright'
                    reuseNode true
                }
            }

            environment {
                CI_ENVIRONMENT_URL = 'NULL'
            }

            steps {
                sh '''
                    echo "======> Checking node version"

                    node --version

                    echo "======> Deploying to staging"

                    netlify --version

                    netlify status

                    netlify deploy --dir=build --json > deploy-staging-output.json

                    CI_ENVIRONMENT_URL=$(node-jq -r '.deploy_url' deploy-staging-output.json)

                    echo "======> Starting playwright test"

                    npx playwright test --reporter=html
                '''
            }

            post {
                    always {
                        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, icon: '', keepAll: false, reportDir: 'playwright-report', reportFiles: 'index.html', reportName: 'Playwright Staging HTML Report', reportTitles: '', useWrapperFileDirectly: true])
                    }
            }
        }

//         stage('Approval') {
//             steps {
//                 timeout(time: 1, unit: 'MINUTES') {
//                     input message: 'Ready to deploy?', ok: 'Yes'
//                 }
//             }
//         }

        stage('Deploy Production and E2E Test') {
            agent {
                docker {
                    //image 'mcr.microsoft.com/playwright:v1.39.0-jammy'
                    image 'choonsiong/my-playwright'
                    reuseNode true
                }
            }

            environment {
                CI_ENVIRONMENT_URL = credentials('NETLIFY_LEARN_JENKINS_APP_CI_ENVIRONMENT_URL')
            }

            steps {
                sh '''
                    echo "======> Checking node version"

                    node --version

                    echo "======> Deploying to production"

                    netlify --version

                    netlify status

                    netlify deploy --dir=build --prod

                    echo "======> Sleeping to wait netlify"

                    sleep 2

                    echo "======> Starting playwright test"

                    npx playwright test --reporter=html
                '''
            }

            post {
                    always {
                        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, icon: '', keepAll: false, reportDir: 'playwright-report', reportFiles: 'index.html', reportName: 'Playwright Production HTML Report', reportTitles: '', useWrapperFileDirectly: true])
                    }
            }
        }
    }
}
